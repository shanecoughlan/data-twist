Welcome to the Data Twist documentation.

Contents:
== Introduction ==
== Usage ==
== Dependancies ==
== Known Issues ==
== Extracting Big Data ==
== Development History ==
== Contact Information ==

And here we go...

== Introduction ==

Data Twist is a project to help people use Open Data to make directories.
It is a project that helps anyone create open versions of Yelp (tm) or
TripAdvisor (tm).

Data Twist acts a foundation for open directories by importing OpenStreetMap
XML data into Wordpress.

== Usage ==

Usage overview: data-twist.rb [options]
    -g, --get FILE                   Get a file
    -l, --load FILE                  Load a file
    -o, --output FILE                Create the output file
    -h, --help                       Display this overview
    -v, --version                    Show the version number

Here are some example commands:
Get and automatically process a file with 'ruby data-twist.rb -g URL'
Convert data with 'ruby data-twist.rb -l [INPUT FILE] -o [OUTPUT]'

If you fail to specify an output file the script will default to "output.sql"

After Data Twist processes the data, load "output.sql" into your Wordpress 
database:

(1) Drop the following tables from the Wordpress database to ensure it is
clean:
 - wp_geo_mashup_locations
 - wp_geo_mashup_location_relationships
 - wp_posts
 - wp_terms
 - wp_term_relationships
 - wp_term_taxonomy
(you can do this through your SQL web admin tools like phpMyAdmin)

(2) Import "output.sql" to load your directory

That's it! You should be ready to go!

== Dependancies ==

Data Twist has some dependancies.

(1) A working Ruby installation. We used version 1.9.2p290.
(2) An XML version of the OpenStreetMap data. The ".osm" files will work.
(3) A vanilla Wordpress installation. We used version 3.5.1.
(4) The Geo Mashup plug-in for Wordpress installed. We used version 1.5.2.

== Known Issues ==

Data Twist has several known issues. You can review them here:
https://github.com/shanecoughlan/data-twist/issues

If you find a new issue, please let us know.

== Extracting Big Data ==

There are different types of OpenStreetMap data that you can download and use
as the basis of local maps or directories.

If you want to download the whole world, you can obtain "the planet" from the
OpenStreetMap project website at this URL:
http://planet.openstreetmap.org/planet/
(you want to download planet-latest.osm.bz2)

You can also download extracts by continent or country at this URL:
http://download.geofabrik.de/openstreetmap/

We downloaded some test data for Tokyo city at this URL:
http://metro.teczno.com

This resource looks useful too:
http://download.bbbike.org/osm/

== Development History ==

This is not the CHANGELOG. That's in another file from our source code.
This is an overview of how we developed Data Twist, and it might help inform
your own development contributions.

We started our testing on simple (and outdate) XML data from Cloudmade:
http://downloads.cloudmade.com
This data is from the OpenStreetMap database, but be aware that supporting its
structure will not mean you can support imports from most OpenStreetMap
resources. To do that please look at the links above.

Our second test data-sets were obtained via the OpenStreetMap XAPI. Here is an
example dataset of 223 public libraries in London, UK that we used:
wget --timeout=0  http://open.mapquestapi.com/xapi/api/0.6/node[amenity=library][bbox=-0.57,51.24,0.31,51.75] -O data.osm

This data was useful to help us do basic imports, though when we tried to
scale up to larger datasets using a similar command we ran into database
duplication errors around the entries. This issue is worth expanding on, as
it is something you are likely to find when experimenting too. Learn more here:
https://github.com/shanecoughlan/data-twist/issues/5

As we proceeded from simple OpenStreetMap XML to more complex sets we decided
to focus on the website export from OpenStreetMap for our test-case setup, and
loaded data from Matsue city, Shimane Prefecture, Japan.

Essentially the import process filters <nodes> by searching for <tag> with
" k="amenity" v="type" " data inside. We use the "amenity" as a positive hit
and the "type" as an information type listed in the resulting Wordpress post.
We read the <tag> that contains the name and use this as the title. We also
read the node timestamp and use this both to record a data for the information
and to show a "last updated" note in the relevant post.

We are still refining this categorization, and how we ensure that the import
works smoothly in Wordpress.

== Contact Information ==

To contact us please use the following addresses. We are always glad to get
input.

Shane Coughlan <shane@opendawn.com> (English preferred)
Kana Fukuma <kana@opendawn.com> (Japanese preferred)